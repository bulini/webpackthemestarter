/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**************************************!*\
  !*** ./node_modules/slick/parser.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\r\nSlick Parser\r\n - originally created by the almighty Thomas Aylott <@subtlegradient> (http://subtlegradient.com)\r\n*/\n\n// Notable changes from Slick.Parser 1.0.x\n\n// The parser now uses 2 classes: Expressions and Expression\n// `new Expressions` produces an array-like object containing a list of Expression objects\n// - Expressions::toString() produces a cleaned up expressions string\n// `new Expression` produces an array-like object\n// - Expression::toString() produces a cleaned up expression string\n// The only exposed method is parse, which produces a (cached) `new Expressions` instance\n// parsed.raw is no longer present, use .toString()\n// parsed.expression is now useless, just use the indices\n// parsed.reverse() has been removed for now, due to its apparent uselessness\n// Other changes in the Expressions object:\n// - classNames are now unique, and save both escaped and unescaped values\n// - attributes now save both escaped and unescaped values\n// - pseudos now save both escaped and unescaped values\n\nvar escapeRe = /([-.*+?^${}()|[\\]\\/\\\\])/g,\n    unescapeRe = /\\\\/g;\n\nvar escape = function (string) {\n    // XRegExp v2.0.0-beta-3\n    // Â« https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js\n    return (string + \"\").replace(escapeRe, '\\\\$1');\n};\n\nvar unescape = function (string) {\n    return (string + \"\").replace(unescapeRe, '');\n};\n\nvar slickRe = RegExp(\n/*\r\n#!/usr/bin/env ruby\r\nputs \"\\t\\t\" + DATA.read.gsub(/\\(\\?x\\)|\\s+#.*$|\\s+|\\\\$|\\\\n/,'')\r\n__END__\r\n    \"(?x)^(?:\\\r\n      \\\\s* ( , ) \\\\s*               # Separator          \\n\\\r\n    | \\\\s* ( <combinator>+ ) \\\\s*   # Combinator         \\n\\\r\n    |      ( \\\\s+ )                 # CombinatorChildren \\n\\\r\n    |      ( <unicode>+ | \\\\* )     # Tag                \\n\\\r\n    | \\\\#  ( <unicode>+       )     # ID                 \\n\\\r\n    | \\\\.  ( <unicode>+       )     # ClassName          \\n\\\r\n    |                               # Attribute          \\n\\\r\n    \\\\[  \\\r\n        \\\\s* (<unicode1>+)  (?:  \\\r\n            \\\\s* ([*^$!~|]?=)  (?:  \\\r\n                \\\\s* (?:\\\r\n                    ([\\\"']?)(.*?)\\\\9 \\\r\n                )\\\r\n            )  \\\r\n        )?  \\\\s*  \\\r\n    \\\\](?!\\\\]) \\n\\\r\n    |   :+ ( <unicode>+ )(?:\\\r\n    \\\\( (?:\\\r\n        (?:([\\\"'])([^\\\\12]*)\\\\12)|((?:\\\\([^)]+\\\\)|[^()]*)+)\\\r\n    ) \\\\)\\\r\n    )?\\\r\n    )\"\r\n*/\n\"^(?:\\\\s*(,)\\\\s*|\\\\s*(<combinator>+)\\\\s*|(\\\\s+)|(<unicode>+|\\\\*)|\\\\#(<unicode>+)|\\\\.(<unicode>+)|\\\\[\\\\s*(<unicode1>+)(?:\\\\s*([*^$!~|]?=)(?:\\\\s*(?:([\\\"']?)(.*?)\\\\9)))?\\\\s*\\\\](?!\\\\])|(:+)(<unicode>+)(?:\\\\((?:(?:([\\\"'])([^\\\\13]*)\\\\13)|((?:\\\\([^)]+\\\\)|[^()]*)+))\\\\))?)\".replace(/<combinator>/, '[' + escape(\">+~`!@$%^&={}\\\\;</\") + ']').replace(/<unicode>/g, '(?:[\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])').replace(/<unicode1>/g, '(?:[:\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])'));\n\n// Part\n\nvar Part = function Part(combinator) {\n    this.combinator = combinator || \" \";\n    this.tag = \"*\";\n};\n\nPart.prototype.toString = function () {\n\n    if (!this.raw) {\n\n        var xpr = \"\",\n            k,\n            part;\n\n        xpr += this.tag || \"*\";\n        if (this.id) xpr += \"#\" + this.id;\n        if (this.classes) xpr += \".\" + this.classList.join(\".\");\n        if (this.attributes) for (k = 0; part = this.attributes[k++];) {\n            xpr += \"[\" + part.name + (part.operator ? part.operator + '\"' + part.value + '\"' : '') + \"]\";\n        }\n        if (this.pseudos) for (k = 0; part = this.pseudos[k++];) {\n            xpr += \":\" + part.name;\n            if (part.value) xpr += \"(\" + part.value + \")\";\n        }\n\n        this.raw = xpr;\n    }\n\n    return this.raw;\n};\n\n// Expression\n\nvar Expression = function Expression() {\n    this.length = 0;\n};\n\nExpression.prototype.toString = function () {\n\n    if (!this.raw) {\n\n        var xpr = \"\";\n\n        for (var j = 0, bit; bit = this[j++];) {\n            if (j !== 1) xpr += \" \";\n            if (bit.combinator !== \" \") xpr += bit.combinator + \" \";\n            xpr += bit;\n        }\n\n        this.raw = xpr;\n    }\n\n    return this.raw;\n};\n\nvar replacer = function (rawMatch, separator, combinator, combinatorChildren, tagName, id, className, attributeKey, attributeOperator, attributeQuote, attributeValue, pseudoMarker, pseudoClass, pseudoQuote, pseudoClassQuotedValue, pseudoClassValue) {\n\n    var expression, current;\n\n    if (separator || !this.length) {\n        expression = this[this.length++] = new Expression();\n        if (separator) return '';\n    }\n\n    if (!expression) expression = this[this.length - 1];\n\n    if (combinator || combinatorChildren || !expression.length) {\n        current = expression[expression.length++] = new Part(combinator);\n    }\n\n    if (!current) current = expression[expression.length - 1];\n\n    if (tagName) {\n\n        current.tag = unescape(tagName);\n    } else if (id) {\n\n        current.id = unescape(id);\n    } else if (className) {\n\n        var unescaped = unescape(className);\n\n        var classes = current.classes || (current.classes = {});\n        if (!classes[unescaped]) {\n            classes[unescaped] = escape(className);\n            var classList = current.classList || (current.classList = []);\n            classList.push(unescaped);\n            classList.sort();\n        }\n    } else if (pseudoClass) {\n\n        pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;(current.pseudos || (current.pseudos = [])).push({\n            type: pseudoMarker.length == 1 ? 'class' : 'element',\n            name: unescape(pseudoClass),\n            escapedName: escape(pseudoClass),\n            value: pseudoClassValue ? unescape(pseudoClassValue) : null,\n            escapedValue: pseudoClassValue ? escape(pseudoClassValue) : null\n        });\n    } else if (attributeKey) {\n\n        attributeValue = attributeValue ? escape(attributeValue) : null;(current.attributes || (current.attributes = [])).push({\n            operator: attributeOperator,\n            name: unescape(attributeKey),\n            escapedName: escape(attributeKey),\n            value: attributeValue ? unescape(attributeValue) : null,\n            escapedValue: attributeValue ? escape(attributeValue) : null\n        });\n    }\n\n    return '';\n};\n\n// Expressions\n\nvar Expressions = function Expressions(expression) {\n    this.length = 0;\n\n    var self = this;\n\n    var original = expression,\n        replaced;\n\n    while (expression) {\n        replaced = expression.replace(slickRe, function () {\n            return replacer.apply(self, arguments);\n        });\n        if (replaced === expression) throw new Error(original + ' is an invalid expression');\n        expression = replaced;\n    }\n};\n\nExpressions.prototype.toString = function () {\n    if (!this.raw) {\n        var expressions = [];\n        for (var i = 0, expression; expression = this[i++];) expressions.push(expression);\n        this.raw = expressions.join(\", \");\n    }\n\n    return this.raw;\n};\n\nvar cache = {};\n\nvar parse = function (expression) {\n    if (expression == null) return null;\n    expression = ('' + expression).replace(/^\\s+|\\s+$/g, '');\n    return cache[expression] || (cache[expression] = new Expressions(expression));\n};\n\nmodule.exports = parse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!**************************************************!*\
  !*** multi ./assets/sass/style.scss ./js/app.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./assets/sass/style.scss */2);
module.exports = __webpack_require__(/*! ./js/app.js */3);


/***/ }),
/* 2 */
/*!********************************!*\
  !*** ./assets/sass/style.scss ***!
  \********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Fzc2V0cy9zYXNzL3N0eWxlLnNjc3M/YjY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXNzZXRzL3Nhc3Mvc3R5bGUuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_slick__ = __webpack_require__(/*! slick */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_slick___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_slick__);\n//js/app.js\n\n//Require scripts\n__webpack_require__(/*! ./script */ 4);\n\n//Require Slick\n//require('script-loader!../node_modules/slick-carousel/slick/slick')\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9hcHAuanM/NDFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2pzL2FwcC5qc1xuXG4vL1JlcXVpcmUgc2NyaXB0c1xucmVxdWlyZSgnLi9zY3JpcHQnKVxuXG4vL1JlcXVpcmUgU2xpY2tcbi8vcmVxdWlyZSgnc2NyaXB0LWxvYWRlciEuLi9ub2RlX21vZHVsZXMvc2xpY2stY2Fyb3VzZWwvc2xpY2svc2xpY2snKVxuaW1wb3J0IFNsaWNrIGZyb20gXCJzbGlja1wiXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvYXBwLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!**********************!*\
  !*** ./js/script.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("console.log('ciao');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9zY3JpcHQuanM/MmY4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZygnY2lhbycpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGpzL3NjcmlwdC5qcyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!*************************************!*\
  !*** ./node_modules/slick/index.js ***!
  \*************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*\r\nslick\r\n*/\n\nmodule.exports = \"document\" in global ? __webpack_require__(/*! ./finder */ 7) : { parse: __webpack_require__(/*! ./parser */ 0) };\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvc2xpY2svaW5kZXguanM/NmI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG5zbGlja1xyXG4qL1widXNlIHN0cmljdFwiXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFwiZG9jdW1lbnRcIiBpbiBnbG9iYWwgPyByZXF1aXJlKFwiLi9maW5kZXJcIikgOiB7IHBhcnNlOiByZXF1aXJlKFwiLi9wYXJzZXJcIikgfVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL3NsaWNrL2luZGV4LmpzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcz9mY2RmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!**************************************!*\
  !*** ./node_modules/slick/finder.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\r\nSlick Finder\r\n*/\n\n// Notable changes from Slick.Finder 1.0.x\n\n// faster bottom -> up expression matching\n// prefers mental sanity over *obsessive compulsive* milliseconds savings\n// uses prototypes instead of objects\n// tries to use matchesSelector smartly, whenever available\n// can populate objects as well as arrays\n// lots of stuff is broken or not implemented\n\nvar parse = __webpack_require__(/*! ./parser */ 0);\n\n// utilities\n\nvar index = 0,\n    counter = document.__counter = (parseInt(document.__counter || -1, 36) + 1).toString(36),\n    key = \"uid:\" + counter;\n\nvar uniqueID = function (n, xml) {\n    if (n === window) return \"window\";\n    if (n === document) return \"document\";\n    if (n === document.documentElement) return \"html\";\n\n    if (xml) {\n        var uid = n.getAttribute(key);\n        if (!uid) {\n            uid = (index++).toString(36);\n            n.setAttribute(key, uid);\n        }\n        return uid;\n    } else {\n        return n[key] || (n[key] = (index++).toString(36));\n    }\n};\n\nvar uniqueIDXML = function (n) {\n    return uniqueID(n, true);\n};\n\nvar isArray = Array.isArray || function (object) {\n    return Object.prototype.toString.call(object) === \"[object Array]\";\n};\n\n// tests\n\nvar uniqueIndex = 0;\n\nvar HAS = {\n\n    GET_ELEMENT_BY_ID: function (test, id) {\n        id = \"slick_\" + uniqueIndex++;\n        // checks if the document has getElementById, and it works\n        test.innerHTML = '<a id=\"' + id + '\"></a>';\n        return !!this.getElementById(id);\n    },\n\n    QUERY_SELECTOR: function (test) {\n        // this supposedly fixes a webkit bug with matchesSelector / querySelector & nth-child\n        test.innerHTML = '_<style>:nth-child(2){}</style>';\n\n        // checks if the document has querySelectorAll, and it works\n        test.innerHTML = '<a class=\"MiX\"></a>';\n\n        return test.querySelectorAll('.MiX').length === 1;\n    },\n\n    EXPANDOS: function (test, id) {\n        id = \"slick_\" + uniqueIndex++;\n        // checks if the document has elements that support expandos\n        test._custom_property_ = id;\n        return test._custom_property_ === id;\n    },\n\n    // TODO: use this ?\n\n    // CHECKED_QUERY_SELECTOR: function(test){\n    //\n    //     // checks if the document supports the checked query selector\n    //     test.innerHTML = '<select><option selected=\"selected\">a</option></select>'\n    //     return test.querySelectorAll(':checked').length === 1\n    // },\n\n    // TODO: use this ?\n\n    // EMPTY_ATTRIBUTE_QUERY_SELECTOR: function(test){\n    //\n    //     // checks if the document supports the empty attribute query selector\n    //     test.innerHTML = '<a class=\"\"></a>'\n    //     return test.querySelectorAll('[class*=\"\"]').length === 1\n    // },\n\n    MATCHES_SELECTOR: function (test) {\n\n        test.className = \"MiX\";\n\n        // checks if the document has matchesSelector, and we can use it.\n\n        var matches = test.matchesSelector || test.mozMatchesSelector || test.webkitMatchesSelector;\n\n        // if matchesSelector trows errors on incorrect syntax we can use it\n        if (matches) try {\n            matches.call(test, ':slick');\n        } catch (e) {\n            // just as a safety precaution, also test if it works on mixedcase (like querySelectorAll)\n            return matches.call(test, \".MiX\") ? matches : false;\n        }\n\n        return false;\n    },\n\n    GET_ELEMENTS_BY_CLASS_NAME: function (test) {\n        test.innerHTML = '<a class=\"f\"></a><a class=\"b\"></a>';\n        if (test.getElementsByClassName('b').length !== 1) return false;\n\n        test.firstChild.className = 'b';\n        if (test.getElementsByClassName('b').length !== 2) return false;\n\n        // Opera 9.6 getElementsByClassName doesnt detects the class if its not the first one\n        test.innerHTML = '<a class=\"a\"></a><a class=\"f b a\"></a>';\n        if (test.getElementsByClassName('a').length !== 2) return false;\n\n        // tests passed\n        return true;\n    },\n\n    // no need to know\n\n    // GET_ELEMENT_BY_ID_NOT_NAME: function(test, id){\n    //     test.innerHTML = '<a name=\"'+ id +'\"></a><b id=\"'+ id +'\"></b>'\n    //     return this.getElementById(id) !== test.firstChild\n    // },\n\n    // this is always checked for and fixed\n\n    // STAR_GET_ELEMENTS_BY_TAG_NAME: function(test){\n    //\n    //     // IE returns comment nodes for getElementsByTagName('*') for some documents\n    //     test.appendChild(this.createComment(''))\n    //     if (test.getElementsByTagName('*').length > 0) return false\n    //\n    //     // IE returns closed nodes (EG:\"</foo>\") for getElementsByTagName('*') for some documents\n    //     test.innerHTML = 'foo</foo>'\n    //     if (test.getElementsByTagName('*').length) return false\n    //\n    //     // tests passed\n    //     return true\n    // },\n\n    // this is always checked for and fixed\n\n    // STAR_QUERY_SELECTOR: function(test){\n    //\n    //     // returns closed nodes (EG:\"</foo>\") for querySelector('*') for some documents\n    //     test.innerHTML = 'foo</foo>'\n    //     return !!(test.querySelectorAll('*').length)\n    // },\n\n    GET_ATTRIBUTE: function (test) {\n        // tests for working getAttribute implementation\n        var shout = \"fus ro dah\";\n        test.innerHTML = '<a class=\"' + shout + '\"></a>';\n        return test.firstChild.getAttribute('class') === shout;\n    }\n\n    // Finder\n\n};var Finder = function Finder(document) {\n\n    this.document = document;\n    var root = this.root = document.documentElement;\n    this.tested = {};\n\n    // uniqueID\n\n    this.uniqueID = this.has(\"EXPANDOS\") ? uniqueID : uniqueIDXML;\n\n    // getAttribute\n\n    this.getAttribute = this.has(\"GET_ATTRIBUTE\") ? function (node, name) {\n\n        return node.getAttribute(name);\n    } : function (node, name) {\n\n        node = node.getAttributeNode(name);\n        return node && node.specified ? node.value : null;\n    };\n\n    // hasAttribute\n\n    this.hasAttribute = root.hasAttribute ? function (node, attribute) {\n\n        return node.hasAttribute(attribute);\n    } : function (node, attribute) {\n\n        node = node.getAttributeNode(attribute);\n        return !!(node && node.specified);\n    };\n\n    // contains\n\n    this.contains = document.contains && root.contains ? function (context, node) {\n\n        return context.contains(node);\n    } : root.compareDocumentPosition ? function (context, node) {\n\n        return context === node || !!(context.compareDocumentPosition(node) & 16);\n    } : function (context, node) {\n\n        do {\n            if (node === context) return true;\n        } while (node = node.parentNode);\n\n        return false;\n    };\n\n    // sort\n    // credits to Sizzle (http://sizzlejs.com/)\n\n    this.sorter = root.compareDocumentPosition ? function (a, b) {\n\n        if (!a.compareDocumentPosition || !b.compareDocumentPosition) return 0;\n        return a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;\n    } : 'sourceIndex' in root ? function (a, b) {\n\n        if (!a.sourceIndex || !b.sourceIndex) return 0;\n        return a.sourceIndex - b.sourceIndex;\n    } : document.createRange ? function (a, b) {\n\n        if (!a.ownerDocument || !b.ownerDocument) return 0;\n        var aRange = a.ownerDocument.createRange(),\n            bRange = b.ownerDocument.createRange();\n\n        aRange.setStart(a, 0);\n        aRange.setEnd(a, 0);\n        bRange.setStart(b, 0);\n        bRange.setEnd(b, 0);\n        return aRange.compareBoundaryPoints(Range.START_TO_END, bRange);\n    } : null;\n\n    this.failed = {};\n\n    var nativeMatches = this.has(\"MATCHES_SELECTOR\");\n\n    if (nativeMatches) this.matchesSelector = function (node, expression) {\n\n        if (this.failed[expression]) return null;\n\n        try {\n            return nativeMatches.call(node, expression);\n        } catch (e) {\n            if (slick.debug) console.warn(\"matchesSelector failed on \" + expression);\n            this.failed[expression] = true;\n            return null;\n        }\n    };\n\n    if (this.has(\"QUERY_SELECTOR\")) {\n\n        this.querySelectorAll = function (node, expression) {\n\n            if (this.failed[expression]) return true;\n\n            var result, _id, _expression, _combinator, _node;\n\n            // non-document rooted QSA\n            // credits to Andrew Dupont\n\n            if (node !== this.document) {\n\n                _combinator = expression[0].combinator;\n\n                _id = node.getAttribute(\"id\");\n                _expression = expression;\n\n                if (!_id) {\n                    _node = node;\n                    _id = \"__slick__\";\n                    _node.setAttribute(\"id\", _id);\n                }\n\n                expression = \"#\" + _id + \" \" + _expression;\n\n                // these combinators need a parentNode due to how querySelectorAll works, which is:\n                // finding all the elements that match the given selector\n                // then filtering by the ones that have the specified element as an ancestor\n                if (_combinator.indexOf(\"~\") > -1 || _combinator.indexOf(\"+\") > -1) {\n\n                    node = node.parentNode;\n                    if (!node) result = true;\n                    // if node has no parentNode, we return \"true\" as if it failed, without polluting the failed cache\n                }\n            }\n\n            if (!result) try {\n                result = node.querySelectorAll(expression.toString());\n            } catch (e) {\n                if (slick.debug) console.warn(\"querySelectorAll failed on \" + (_expression || expression));\n                result = this.failed[_expression || expression] = true;\n            }\n\n            if (_node) _node.removeAttribute(\"id\");\n\n            return result;\n        };\n    }\n};\n\nFinder.prototype.has = function (FEATURE) {\n\n    var tested = this.tested,\n        testedFEATURE = tested[FEATURE];\n\n    if (testedFEATURE != null) return testedFEATURE;\n\n    var root = this.root,\n        document = this.document,\n        testNode = document.createElement(\"div\");\n\n    testNode.setAttribute(\"style\", \"display: none;\");\n\n    root.appendChild(testNode);\n\n    var TEST = HAS[FEATURE],\n        result = false;\n\n    if (TEST) try {\n        result = TEST.call(document, testNode);\n    } catch (e) {}\n\n    if (slick.debug && !result) console.warn(\"document has no \" + FEATURE);\n\n    root.removeChild(testNode);\n\n    return tested[FEATURE] = result;\n};\n\nvar combinators = {\n\n    \" \": function (node, part, push) {\n\n        var item, items;\n\n        var noId = !part.id,\n            noTag = !part.tag,\n            noClass = !part.classes;\n\n        if (part.id && node.getElementById && this.has(\"GET_ELEMENT_BY_ID\")) {\n            item = node.getElementById(part.id);\n\n            // return only if id is found, else keep checking\n            // might be a tad slower on non-existing ids, but less insane\n\n            if (item && item.getAttribute('id') === part.id) {\n                items = [item];\n                noId = true;\n                // if tag is star, no need to check it in match()\n                if (part.tag === \"*\") noTag = true;\n            }\n        }\n\n        if (!items) {\n\n            if (part.classes && node.getElementsByClassName && this.has(\"GET_ELEMENTS_BY_CLASS_NAME\")) {\n                items = node.getElementsByClassName(part.classList);\n                noClass = true;\n                // if tag is star, no need to check it in match()\n                if (part.tag === \"*\") noTag = true;\n            } else {\n                items = node.getElementsByTagName(part.tag);\n                // if tag is star, need to check it in match because it could select junk, boho\n                if (part.tag !== \"*\") noTag = true;\n            }\n\n            if (!items || !items.length) return false;\n        }\n\n        for (var i = 0; item = items[i++];) if (noTag && noId && noClass && !part.attributes && !part.pseudos || this.match(item, part, noTag, noId, noClass)) push(item);\n\n        return true;\n    },\n\n    \">\": function (node, part, push) {\n        // direct children\n        if (node = node.firstChild) do {\n            if (node.nodeType == 1 && this.match(node, part)) push(node);\n        } while (node = node.nextSibling);\n    },\n\n    \"+\": function (node, part, push) {\n        // next sibling\n        while (node = node.nextSibling) if (node.nodeType == 1) {\n            if (this.match(node, part)) push(node);\n            break;\n        }\n    },\n\n    \"^\": function (node, part, push) {\n        // first child\n        node = node.firstChild;\n        if (node) {\n            if (node.nodeType === 1) {\n                if (this.match(node, part)) push(node);\n            } else {\n                combinators['+'].call(this, node, part, push);\n            }\n        }\n    },\n\n    \"~\": function (node, part, push) {\n        // next siblings\n        while (node = node.nextSibling) {\n            if (node.nodeType === 1 && this.match(node, part)) push(node);\n        }\n    },\n\n    \"++\": function (node, part, push) {\n        // next sibling and previous sibling\n        combinators['+'].call(this, node, part, push);\n        combinators['!+'].call(this, node, part, push);\n    },\n\n    \"~~\": function (node, part, push) {\n        // next siblings and previous siblings\n        combinators['~'].call(this, node, part, push);\n        combinators['!~'].call(this, node, part, push);\n    },\n\n    \"!\": function (node, part, push) {\n        // all parent nodes up to document\n        while (node = node.parentNode) if (node !== this.document && this.match(node, part)) push(node);\n    },\n\n    \"!>\": function (node, part, push) {\n        // direct parent (one level)\n        node = node.parentNode;\n        if (node !== this.document && this.match(node, part)) push(node);\n    },\n\n    \"!+\": function (node, part, push) {\n        // previous sibling\n        while (node = node.previousSibling) if (node.nodeType == 1) {\n            if (this.match(node, part)) push(node);\n            break;\n        }\n    },\n\n    \"!^\": function (node, part, push) {\n        // last child\n        node = node.lastChild;\n        if (node) {\n            if (node.nodeType == 1) {\n                if (this.match(node, part)) push(node);\n            } else {\n                combinators['!+'].call(this, node, part, push);\n            }\n        }\n    },\n\n    \"!~\": function (node, part, push) {\n        // previous siblings\n        while (node = node.previousSibling) {\n            if (node.nodeType === 1 && this.match(node, part)) push(node);\n        }\n    }\n\n};\n\nFinder.prototype.search = function (context, expression, found) {\n\n    if (!context) context = this.document;else if (!context.nodeType && context.document) context = context.document;\n\n    var expressions = parse(expression);\n\n    // no expressions were parsed. todo: is this really necessary?\n    if (!expressions || !expressions.length) throw new Error(\"invalid expression\");\n\n    if (!found) found = [];\n\n    var uniques,\n        push = isArray(found) ? function (node) {\n        found[found.length] = node;\n    } : function (node) {\n        found[found.length++] = node;\n    };\n\n    // if there is more than one expression we need to check for duplicates when we push to found\n    // this simply saves the old push and wraps it around an uid dupe check.\n    if (expressions.length > 1) {\n        uniques = {};\n        var plush = push;\n        push = function (node) {\n            var uid = uniqueID(node);\n            if (!uniques[uid]) {\n                uniques[uid] = true;\n                plush(node);\n            }\n        };\n    }\n\n    // walker\n\n    var node, nodes, part;\n\n    main: for (var i = 0; expression = expressions[i++];) {\n\n        // querySelector\n\n        // TODO: more functional tests\n\n        // if there is querySelectorAll (and the expression does not fail) use it.\n        if (!slick.noQSA && this.querySelectorAll) {\n\n            nodes = this.querySelectorAll(context, expression);\n            if (nodes !== true) {\n                if (nodes && nodes.length) for (var j = 0; node = nodes[j++];) if (node.nodeName > '@') {\n                    push(node);\n                }\n                continue main;\n            }\n        }\n\n        // if there is only one part in the expression we don't need to check each part for duplicates.\n        // todo: this might be too naive. while solid, there can be expression sequences that do not\n        // produce duplicates. \"body div\" for instance, can never give you each div more than once.\n        // \"body div a\" on the other hand might.\n        if (expression.length === 1) {\n\n            part = expression[0];\n            combinators[part.combinator].call(this, context, part, push);\n        } else {\n\n            var cs = [context],\n                c,\n                f,\n                u,\n                p = function (node) {\n                var uid = uniqueID(node);\n                if (!u[uid]) {\n                    u[uid] = true;\n                    f[f.length] = node;\n                }\n            };\n\n            // loop the expression parts\n            for (var j = 0; part = expression[j++];) {\n                f = [];u = {};\n                // loop the contexts\n                for (var k = 0; c = cs[k++];) combinators[part.combinator].call(this, c, part, p);\n                // nothing was found, the expression failed, continue to the next expression.\n                if (!f.length) continue main;\n                cs = f; // set the contexts for future parts (if any)\n            }\n\n            if (i === 0) found = f; // first expression. directly set found.\n            else for (var l = 0; l < f.length; l++) push(f[l]); // any other expression needs to push to found.\n        }\n    }\n\n    if (uniques && found && found.length > 1) this.sort(found);\n\n    return found;\n};\n\nFinder.prototype.sort = function (nodes) {\n    return this.sorter ? Array.prototype.sort.call(nodes, this.sorter) : nodes;\n};\n\n// TODO: most of these pseudo selectors include <html> and qsa doesnt. fixme.\n\nvar pseudos = {\n\n    // TODO: returns different results than qsa empty.\n\n    'empty': function () {\n        return !(this && this.nodeType === 1) && !(this.innerText || this.textContent || '').length;\n    },\n\n    'not': function (expression) {\n        return !slick.matches(this, expression);\n    },\n\n    'contains': function (text) {\n        return (this.innerText || this.textContent || '').indexOf(text) > -1;\n    },\n\n    'first-child': function () {\n        var node = this;\n        while (node = node.previousSibling) if (node.nodeType == 1) return false;\n        return true;\n    },\n\n    'last-child': function () {\n        var node = this;\n        while (node = node.nextSibling) if (node.nodeType == 1) return false;\n        return true;\n    },\n\n    'only-child': function () {\n        var prev = this;\n        while (prev = prev.previousSibling) if (prev.nodeType == 1) return false;\n\n        var next = this;\n        while (next = next.nextSibling) if (next.nodeType == 1) return false;\n\n        return true;\n    },\n\n    'first-of-type': function () {\n        var node = this,\n            nodeName = node.nodeName;\n        while (node = node.previousSibling) if (node.nodeName == nodeName) return false;\n        return true;\n    },\n\n    'last-of-type': function () {\n        var node = this,\n            nodeName = node.nodeName;\n        while (node = node.nextSibling) if (node.nodeName == nodeName) return false;\n        return true;\n    },\n\n    'only-of-type': function () {\n        var prev = this,\n            nodeName = this.nodeName;\n        while (prev = prev.previousSibling) if (prev.nodeName == nodeName) return false;\n        var next = this;\n        while (next = next.nextSibling) if (next.nodeName == nodeName) return false;\n        return true;\n    },\n\n    'enabled': function () {\n        return !this.disabled;\n    },\n\n    'disabled': function () {\n        return this.disabled;\n    },\n\n    'checked': function () {\n        return this.checked || this.selected;\n    },\n\n    'selected': function () {\n        return this.selected;\n    },\n\n    'focus': function () {\n        var doc = this.ownerDocument;\n        return doc.activeElement === this && (this.href || this.type || slick.hasAttribute(this, 'tabindex'));\n    },\n\n    'root': function () {\n        return this === this.ownerDocument.documentElement;\n    }\n\n};\n\nFinder.prototype.match = function (node, bit, noTag, noId, noClass) {\n\n    // TODO: more functional tests ?\n\n    if (!slick.noQSA && this.matchesSelector) {\n        var matches = this.matchesSelector(node, bit);\n        if (matches !== null) return matches;\n    }\n\n    // normal matching\n\n    if (!noTag && bit.tag) {\n\n        var nodeName = node.nodeName.toLowerCase();\n        if (bit.tag === \"*\") {\n            if (nodeName < \"@\") return false;\n        } else if (nodeName != bit.tag) {\n            return false;\n        }\n    }\n\n    if (!noId && bit.id && node.getAttribute('id') !== bit.id) return false;\n\n    var i, part;\n\n    if (!noClass && bit.classes) {\n\n        var className = this.getAttribute(node, \"class\");\n        if (!className) return false;\n\n        for (part in bit.classes) if (!RegExp('(^|\\\\s)' + bit.classes[part] + '(\\\\s|$)').test(className)) return false;\n    }\n\n    var name, value;\n\n    if (bit.attributes) for (i = 0; part = bit.attributes[i++];) {\n\n        var operator = part.operator,\n            escaped = part.escapedValue;\n\n        name = part.name;\n        value = part.value;\n\n        if (!operator) {\n\n            if (!this.hasAttribute(node, name)) return false;\n        } else {\n\n            var actual = this.getAttribute(node, name);\n            if (actual == null) return false;\n\n            switch (operator) {\n                case '^=':\n                    if (!RegExp('^' + escaped).test(actual)) return false;break;\n                case '$=':\n                    if (!RegExp(escaped + '$').test(actual)) return false;break;\n                case '~=':\n                    if (!RegExp('(^|\\\\s)' + escaped + '(\\\\s|$)').test(actual)) return false;break;\n                case '|=':\n                    if (!RegExp('^' + escaped + '(-|$)').test(actual)) return false;break;\n\n                case '=':\n                    if (actual !== value) return false;break;\n                case '*=':\n                    if (actual.indexOf(value) === -1) return false;break;\n                default:\n                    return false;\n            }\n        }\n    }\n\n    if (bit.pseudos) for (i = 0; part = bit.pseudos[i++];) {\n\n        name = part.name;\n        value = part.value;\n\n        if (pseudos[name]) return pseudos[name].call(node, value);\n\n        if (value != null) {\n            if (this.getAttribute(node, name) !== value) return false;\n        } else {\n            if (!this.hasAttribute(node, name)) return false;\n        }\n    }\n\n    return true;\n};\n\nFinder.prototype.matches = function (node, expression) {\n\n    var expressions = parse(expression);\n\n    if (expressions.length === 1 && expressions[0].length === 1) {\n        // simplest match\n        return this.match(node, expressions[0][0]);\n    }\n\n    // TODO: more functional tests ?\n\n    if (!slick.noQSA && this.matchesSelector) {\n        var matches = this.matchesSelector(node, expressions);\n        if (matches !== null) return matches;\n    }\n\n    var nodes = this.search(this.document, expression, { length: 0 });\n\n    for (var i = 0, res; res = nodes[i++];) if (node === res) return true;\n    return false;\n};\n\nvar finders = {};\n\nvar finder = function (context) {\n    var doc = context || document;\n    if (doc.ownerDocument) doc = doc.ownerDocument;else if (doc.document) doc = doc.document;\n\n    if (doc.nodeType !== 9) throw new TypeError(\"invalid document\");\n\n    var uid = uniqueID(doc);\n    return finders[uid] || (finders[uid] = new Finder(doc));\n};\n\n// ... API ...\n\nvar slick = function (expression, context) {\n    return slick.search(expression, context);\n};\n\nslick.search = function (expression, context, found) {\n    return finder(context).search(context, expression, found);\n};\n\nslick.find = function (expression, context) {\n    return finder(context).search(context, expression)[0] || null;\n};\n\nslick.getAttribute = function (node, name) {\n    return finder(node).getAttribute(node, name);\n};\n\nslick.hasAttribute = function (node, name) {\n    return finder(node).hasAttribute(node, name);\n};\n\nslick.contains = function (context, node) {\n    return finder(context).contains(context, node);\n};\n\nslick.matches = function (node, expression) {\n    return finder(node).matches(node, expression);\n};\n\nslick.sort = function (nodes) {\n    if (nodes && nodes.length > 1) finder(nodes[0]).sort(nodes);\n    return nodes;\n};\n\nslick.parse = parse;\n\n// slick.debug = true\n// slick.noQSA  = true\n\nmodule.exports = slick;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ })
/******/ ]);